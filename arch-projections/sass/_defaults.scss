@import url('https://fonts.googleapis.com/css?family=Cairo:200,400');

$fonts: Cairo,
"Helvetica neue",
sans-sarif;
$primary-color: black;
$font-color: #c8c8c8;
$transiton-function: cubic-bezier(0, 0, 0.18, 1);

html,
body {
    margin: 0;
    width: 100%;
    height: 100%;
    font-family: $fonts;
    overflow: hidden;
}

* {
    box-sizing: border-box;
}

ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

a {
    text-decoration: none;
    color: inherit;
}

%full-size {
    width: 100%;
    height: 100%;
}

%roller-text {
    padding: 17px 0;
    margin: 0;
    font-size: 20px;
    line-height: 1;
    font-weight: 500;
}

%transform-animated {
    transition: transform 666ms $transiton-function;
}

%justified-text {
    margin: 0 auto;
    font-weight: 300;
    font-size: 0.85em;
    hyphens: auto;
    font-kerning: auto;
    text-align: justify;
    color: #999999;
}

@mixin liNavDelay($item, $length, $delay, $isNested, $op) {
    $sub-items: 0;

    @if($isNested==true) {
        @for $i from 1 through $length {
            >#{$item}:nth-of-type(#{$i}) {
                transition-delay: $delay;

                @if ($op==increment) {
                    $delay: $delay + 0.05;
                }

                @else if ($op==decrement) {
                    $delay: $delay - 0.05;
                }

                .sub-list {
                    @if($i==1) {
                        $sub-items: 4;
                    }

                    @else if ($i==2) {
                        $sub-items: 5;
                    }

                    @else if ($i==3) {
                        $sub-items: 3;
                    }

                    @for $j from 1 through $sub-items {
                        >#{$item}:nth-of-type(#{$j}) {
                            transition-delay: $delay;

                            @if ($op==increment) {
                                $delay: $delay + 0.05;
                            }

                            @else if ($op==decrement) {
                                $delay: $delay - 0.05;
                            }
                        }
                    }
                }
            }
        }
    }

    @else {
        @for $i from 1 through $length {
            >#{$item}:nth-of-type(#{$i}) {
                $delay: $delay + ($i - 1) * 0.1;
                transition-delay: $delay;
            }
        }
    }
}

@mixin border-expansion-animation ($name, $min-scale, $max-scale) {
    @keyframes #{$name} {
        0% {
            opacity: 0;
            transform: scale($min-scale);
        }

        5% {
            opacity: 1;
        }

        85% {
            opacity: 0;
        }

        90% {
            transform: scale($max-scale);
        }

        100% {
            opacity: 0;
            transform: scale($min-scale);
        }
    }
}

// @include border-expansion-animation(hotspot-border-expansion, 1, 1.5);

@mixin fade-out-fade-in-animation ($name, $min-opacity, $max-opacity) {
    @keyframes #{$name} {
        0% {
            opacity: $max-opacity;
        }

        50% {
            opacity: $min-opacity;
        }

        100% {
            opacity: $max-opacity;
        }
    }
}

@include fade-out-fade-in-animation(fade-out-in, 0.3, 1);